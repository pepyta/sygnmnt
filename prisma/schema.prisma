// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  password    String
  memberships Membership[]
  submissions Submission[]

  @@map("users")
}

// Logs of a submission's run are stored here
model Log {
  id         String     @id @default(uuid())
  content    String
  type       LogType
  status     LogStatus
  submission Submission @relation(fields: [submissionId], references: [id])
  createdAt  DateTime   @default(now())

  submissionId String

  @@map("logs")
}

// A task can be created by an owner or an auxillary
model Task {
  id          String              @id @default(uuid())
  name        String
  description String
  language    ProgrammingLanguage
  submissions Submission[]
  team        Team                @relation(fields: [teamId], references: [id])
  files       File[]
  createdAt   DateTime            @default(now())
  dueAt       DateTime?

  teamId String

  @@map("tasks")
}

// A single submission to a task by a user
// A user can submit multiple solution to a task
model Submission {
  id        String           @id @default(uuid())
  status    SubmissionStatus @default(WAITING)
  task      Task             @relation(fields: [taskId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  files     File[]
  logs      Log[]
  createdAt DateTime         @default(now())

  taskId String
  userId String

  @@map("submissions")
}

// Files are stored as plain text in the database to make things easier
model File {
  id           String      @default(uuid()) @id
  name         String
  content      String      @db.LongText()
  Task         Task?       @relation(fields: [taskId], references: [id])
  taskId       String?
  Submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?

  @@map("files")
}

model Team {
  id          String       @id @default(uuid())
  name        String
  memberships Membership[]
  tasks       Task[]

  @@map("teams")
}

model Membership {
  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])
  role Role

  teamId String
  userId String

  @@id([userId, teamId])
  @@map("memberships")
}

enum Role {
  OWNER
  AUXILIARY
  MEMBER
}

enum SubmissionStatus {
  WAITING
  BUILDING
  RUNNING
  FAILED
  PASSED
}

enum LogStatus {
  BUILDING
  RUNNING
}

enum ProgrammingLanguage {
  C
  CPP
}

enum LogType {
  STANDARD
  ERROR
}
